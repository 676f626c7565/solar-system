name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
  pull_request:
    branches:
      - main

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      actions: read
      contents: read
      security-events: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::399597048779:role/GitHUB-Actions
          aws-region: ca-central-1

      - name: Upload CodeQL results to S3
        run: |
          # Create directory for CodeQL results
          mkdir codeql-results-${{ github.sha }}
          
          # Copy CodeQL database and results if they exist
          if [ -d "${{ runner.temp }}/codeql_databases" ]; then
            cp -r ${{ runner.temp }}/codeql_databases/* codeql-results-${{ github.sha }}/ || echo "No database files to copy"
          fi
          
          # Look for SARIF results files
          find . -name "*.sarif" -exec cp {} codeql-results-${{ github.sha }}/ \; || echo "No SARIF files found"
          
          # Create a summary file
          echo "CodeQL Analysis Results for commit ${{ github.sha }}" > codeql-results-${{ github.sha }}/analysis-summary.txt
          echo "Language: ${{ matrix.language }}" >> codeql-results-${{ github.sha }}/analysis-summary.txt
          echo "Timestamp: $(date)" >> codeql-results-${{ github.sha }}/analysis-summary.txt
          
          # Upload to S3
          aws s3 sync codeql-results-${{ github.sha }}/ s3://weir-testing-results/codeql-results-${{ github.sha }}/ \
            --follow-symlinks \
            --exclude ".*"
          
          echo "CodeQL results uploaded to: s3://weir-testing-results/codeql-results-${{ github.sha }}/"

  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
        MONGO_URI: 'mongodb://localhost:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
    strategy:
      matrix:
        nodejs_version: [18, 19]
        operating_system: [ubuntu-latest]
        exclude:
          - nodejs_version: 18
            operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Composite Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/
        with:
          path-of-folder: node_modules

      - name: Unit Testing
        id: nodejs-unit-testing-step
        run: npm test

      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result-${{ matrix.operating_system }}-node${{ matrix.nodejs_version }}
          path: test-results.xml

  code-coverage:
    name: Code Coverage
    container:
        image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options:
            --name mongo
    env:
        MONGO_URI: 'mongodb://mongo:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Setup NodeJS Version - 18
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 18

      - name: Composite Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/
        with:
          path-of-folder: node_modules

      - name: Check Code Coverage
        run: npm run coverage
        continue-on-error: true

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 4

  reports-s3:
    needs: [code-coverage, unit-testing]
    name: AWS S3 - Upload Reports
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download Mocha Test Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: Mocha-Test-Result-*
          merge-multiple: true

      - name: Download Code Coverage Srtifact
        uses: actions/download-artifact@v4
        with:
          name: Code-Coverage-Result
      
      - name: Merge Test Files
        run: |
            ls -ltr
            mkdir reports-${{ github.sha }}
            mv cobertura-coverage.xml reports-${{ github.sha }}/
            mv test-results.xml reports-${{ github.sha }}/
            ls -ltr reports-${{ github.sha }}/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::399597048779:role/GitHUB-Actions
          aws-region: ca-central-1
      
      - name: Upload test reports to S3
        run: |
          aws s3 sync reports-${{ github.sha }}/ s3://weir-testing-results/reports-${{ github.sha }}/ \
            --follow-symlinks \
            --delete \
            --exclude ".*"
          
            echo "Uploading to s3"
            echo "----------------"
            echo "Reports uploaded to: s3://weir-testing-results/reports-${{ github.sha }}/"

  docker:
    name: Containerization
    needs: [unit-testing, code-coverage]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build For Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d  \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP
          
          echo Testing Image URL using wget 
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
               ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
               ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: docker
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/reuse-deployment.yml
    secrets:
      mongodb-password: ${{ secrets.MONGO_PASSWORD  }}
    with:
      mongodb-uri: ${{ vars.MONGO_URI }}
      environment: development
      k8s-manifest-dir: kubernetes/development/

  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    name: Development Integration Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test URL Output using CURL and JQ
        env:
          URL: google.com
        run: |
          echo $URL
          echo "--------------------------------------------"
          # curl https://$URL/live -s -k | jq -r .status | grep -i live

  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/reuse-deployment.yml
    secrets:
      mongodb-password: ${{ secrets.MONGO_PASSWORD  }}
    with:
      mongodb-uri: ${{ vars.MONGO_URI }}
      environment: production
      k8s-manifest-dir: kubernetes/production/

  prod-integration-testing:
    name: Production Integration Testing
    if: github.ref == 'refs/heads/main'
    needs: prod-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test URL Output using CURL and JQ
        env:
          URL: ${{ needs.prod-deploy.outputs.application-url }}
        run: |
          echo "there should be a url here"
          echo $URL
        #   echo "--------------------------------------------"
        #   curl https://$URL/live -s -k | jq -r .status | grep -i live